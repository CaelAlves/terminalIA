<html><head><base href="https://chatcaelia.com/">
<title>Cael-ia Chatbot Interface</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<style>
  body {
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
  }
  
  #chat-container {
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
    width: 100%;
    max-width: 500px;
    display: flex;
    flex-direction: column;
    height: 100vh;
  }
  
  #chat-header {
    background-color: #4a90e2;
    color: white;
    padding: 15px;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    text-align: center;
  }
  
  #chat-header h1 {
    margin: 0;
    font-size: 1.5rem;
  }
  
  #chat-area {
    flex-grow: 1;
    overflow-y: auto;
    padding: 15px;
    display: flex;
    flex-direction: column;
  }
  
  .message {
    max-width: 80%;
    margin-bottom: 10px;
    padding: 8px 12px;
    border-radius: 18px;
    line-height: 1.4;
    font-size: 0.9rem;
  }
  
  .user-message {
    align-self: flex-end;
    background-color: #e3f2fd;
  }
  
  .bot-message {
    align-self: flex-start;
    background-color: #f0f0f0;
  }
  
  #input-area {
    display: flex;
    padding: 10px;
    border-top: 1px solid #e0e0e0;
  }
  
  #user-input {
    flex-grow: 1;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 20px;
    font-size: 16px;
  }
  
  #send-button {
    background-color: #4a90e2;
    color: white;
    border: none;
    padding: 10px;
    margin-left: 10px;
    border-radius: 50%;
    cursor: pointer;
    font-size: 16px;
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  #send-button:hover {
    background-color: #3a7bc8;
  }
  
  #name-prompt {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  
  #name-form {
    background-color: white;
    padding: 20px;
    border-radius: 10px;
    text-align: center;
    width: 80%;
    max-width: 300px;
  }
  
  #name-input {
    width: 100%;
    padding: 10px;
    margin: 10px 0;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    box-sizing: border-box;
  }
  
  #name-submit {
    background-color: #4a90e2;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    width: 100%;
  }

  @media (max-width: 480px) {
    #chat-container {
      height: 100vh;
      border-radius: 0;
    }

    #chat-header {
      border-radius: 0;
    }

    .message {
      max-width: 90%;
    }
  }
</style>
</head>
<body>
  <div id="chat-container">
    <div id="chat-header">
      <h1>Cael-iA - inteligencia artificial</h1>
    </div>
    <div id="chat-area"></div>
    <div id="input-area">
      <input type="text" id="user-input" placeholder="Digite sua mensagem...">
      <button id="send-button">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="22" y1="2" x2="11" y2="13"></line>
          <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
        </svg>
      </button>
    </div>
  </div>
  
  <div id="name-prompt">
    <div id="name-form">
      <h2>Bem-vindo!</h2>
      <p>Antes de começarmos, por favor me diga seu nome:</p>
      <input type="text" id="name-input" placeholder="Seu nome">
      <button id="name-submit">Começar</button>
    </div>
  </div>

<script>
const GROQ_API_KEY = "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";
const GROQ_API_URL = "https://api.groq.com/openai/v1/chat/completions";

let messages = [];
let userName = "";

async function queryGroq(messages) {
  const response = await fetch(GROQ_API_URL, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${GROQ_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: "llama3-8b-8192",
      messages: messages
    })
  });

  if (response.ok) {
    const data = await response.json();
    return data.choices[0].message.content;
  } else {
    throw new Error(`Error: ${response.status} - ${await response.text()}`);
  }
}

function addMessage(sender, content) {
  const chatArea = document.getElementById('chat-area');
  const messageElement = document.createElement('div');
  messageElement.classList.add('message');
  messageElement.classList.add(sender === 'user' ? 'user-message' : 'bot-message');
  messageElement.textContent = content;
  chatArea.appendChild(messageElement);
  chatArea.scrollTop = chatArea.scrollHeight;
}

async function sendMessage() {
  const userInput = document.getElementById('user-input');
  const userMessage = userInput.value.trim();
  
  if (userMessage) {
    addMessage('user', `${userName}: ${userMessage}`);
    messages.push({role: "user", content: userMessage});
    userInput.value = '';
    
    try {
      const response = await queryGroq(messages);
      addMessage('bot', `Cael-ia: ${response}`);
      messages.push({role: "assistant", content: response});
    } catch (error) {
      console.error('Error:', error);
      addMessage('bot', 'Desculpe, ocorreu um erro ao processar sua mensagem.');
    }
  }
}

function setUserName() {
  userName = document.getElementById('name-input').value.trim();
  if (userName) {
    document.getElementById('name-prompt').style.display = 'none';
    addMessage('bot', `Cael-ia: Olá, ${userName}! Eu sou uma inteligência artificial criada por Cael P. Alves. Ainda estou em desenvolvimento. Como posso ajudar você hoje?`);
  }
}

document.getElementById('send-button').addEventListener('click', sendMessage);
document.getElementById('user-input').addEventListener('keypress', (e) => {
  if (e.key === 'Enter') sendMessage();
});
document.getElementById('name-submit').addEventListener('click', setUserName);
document.getElementById('name-input').addEventListener('keypress', (e) => {
  if (e.key === 'Enter') setUserName();
});

// Ajuste a altura do chat-area para telas menores
function adjustHeight() {
  const chatContainer = document.getElementById('chat-container');
  const chatHeader = document.getElementById('chat-header');
  const inputArea = document.getElementById('input-area');
  const chatArea = document.getElementById('chat-area');
  
  const availableHeight = chatContainer.clientHeight - chatHeader.clientHeight - inputArea.clientHeight;
  chatArea.style.height = `${availableHeight}px`;
}

window.addEventListener('resize', adjustHeight);
window.addEventListener('load', adjustHeight);
</script>

</body></html><html><head><base href="https://chatcaelia.com/">
<title>Cael-ia Chatbot Interface</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<style>
  body {
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
  }
  
  #chat-container {
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
    width: 100%;
    max-width: 500px;
    display: flex;
    flex-direction: column;
    height: 100vh;
  }
  
  #chat-header {
    background-color: #4a90e2;
    color: white;
    padding: 15px;
    border-top-left-radius: 10px;
    border-top-right-radius: 10px;
    text-align: center;
  }
  
  #chat-header h1 {
    margin: 0;
    font-size: 1.5rem;
  }
  
  #chat-area {
    flex-grow: 1;
    overflow-y: auto;
    padding: 15px;
    display: flex;
    flex-direction: column;
  }
  
  .message {
    max-width: 80%;
    margin-bottom: 10px;
    padding: 8px 12px;
    border-radius: 18px;
    line-height: 1.4;
    font-size: 0.9rem;
  }
  
  .user-message {
    align-self: flex-end;
    background-color: #e3f2fd;
  }
  
  .bot-message {
    align-self: flex-start;
    background-color: #f0f0f0;
  }
  
  #input-area {
    display: flex;
    padding: 10px;
    border-top: 1px solid #e0e0e0;
  }
  
  #user-input {
    flex-grow: 1;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 20px;
    font-size: 16px;
  }
  
  #send-button {
    background-color: #4a90e2;
    color: white;
    border: none;
    padding: 10px;
    margin-left: 10px;
    border-radius: 50%;
    cursor: pointer;
    font-size: 16px;
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  #send-button:hover {
    background-color: #3a7bc8;
  }
  
  #name-prompt {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  
  #name-form {
    background-color: white;
    padding: 20px;
    border-radius: 10px;
    text-align: center;
    width: 80%;
    max-width: 300px;
  }
  
  #name-input {
    width: 100%;
    padding: 10px;
    margin: 10px 0;
    border: 1px solid #ccc;
    border-radius: 5px;
    font-size: 16px;
    box-sizing: border-box;
  }
  
  #name-submit {
    background-color: #4a90e2;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    width: 100%;
  }

  @media (max-width: 480px) {
    #chat-container {
      height: 100vh;
      border-radius: 0;
    }

    #chat-header {
      border-radius: 0;
    }

    .message {
      max-width: 90%;
    }
  }
</style>
</head>
<body>
  <div id="chat-container">
    <div id="chat-header">
      <h1>Cael-iA - inteligencia artificial</h1>
    </div>
    <div id="chat-area"></div>
    <div id="input-area">
      <input type="text" id="user-input" placeholder="Digite sua mensagem...">
      <button id="send-button">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <line x1="22" y1="2" x2="11" y2="13"></line>
          <polygon points="22 2 15 22 11 13 2 9 22 2"></polygon>
        </svg>
      </button>
    </div>
  </div>
  
  <div id="name-prompt">
    <div id="name-form">
      <h2>Bem-vindo!</h2>
      <p>Antes de começarmos, por favor me diga seu nome:</p>
      <input type="text" id="name-input" placeholder="Seu nome">
      <button id="name-submit">Começar</button>
    </div>
  </div>

<script>
const GROQ_API_KEY = "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";
const GROQ_API_URL = "https://api.groq.com/openai/v1/chat/completions";

let messages = [];
let userName = "";

async function queryGroq(messages) {
  const response = await fetch(GROQ_API_URL, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${GROQ_API_KEY}`,
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      model: "llama3-8b-8192",
      messages: messages
    })
  });

  if (response.ok) {
    const data = await response.json();
    return data.choices[0].message.content;
  } else {
    throw new Error(`Error: ${response.status} - ${await response.text()}`);
  }
}

function addMessage(sender, content) {
  const chatArea = document.getElementById('chat-area');
  const messageElement = document.createElement('div');
  messageElement.classList.add('message');
  messageElement.classList.add(sender === 'user' ? 'user-message' : 'bot-message');
  messageElement.textContent = content;
  chatArea.appendChild(messageElement);
  chatArea.scrollTop = chatArea.scrollHeight;
}

async function sendMessage() {
  const userInput = document.getElementById('user-input');
  const userMessage = userInput.value.trim();
  
  if (userMessage) {
    addMessage('user', `${userName}: ${userMessage}`);
    messages.push({role: "user", content: userMessage});
    userInput.value = '';
    
    try {
      const response = await queryGroq(messages);
      addMessage('bot', `Cael-ia: ${response}`);
      messages.push({role: "assistant", content: response});
    } catch (error) {
      console.error('Error:', error);
      addMessage('bot', 'Desculpe, ocorreu um erro ao processar sua mensagem.');
    }
  }
}

function setUserName() {
  userName = document.getElementById('name-input').value.trim();
  if (userName) {
    document.getElementById('name-prompt').style.display = 'none';
    addMessage('bot', `Cael-ia: Olá, ${userName}! Eu sou uma inteligência artificial criada por Cael P. Alves. Ainda estou em desenvolvimento. Como posso ajudar você hoje?`);
  }
}

document.getElementById('send-button').addEventListener('click', sendMessage);
document.getElementById('user-input').addEventListener('keypress', (e) => {
  if (e.key === 'Enter') sendMessage();
});
document.getElementById('name-submit').addEventListener('click', setUserName);
document.getElementById('name-input').addEventListener('keypress', (e) => {
  if (e.key === 'Enter') setUserName();
});

// Ajuste a altura do chat-area para telas menores
function adjustHeight() {
  const chatContainer = document.getElementById('chat-container');
  const chatHeader = document.getElementById('chat-header');
  const inputArea = document.getElementById('input-area');
  const chatArea = document.getElementById('chat-area');
  
  const availableHeight = chatContainer.clientHeight - chatHeader.clientHeight - inputArea.clientHeight;
  chatArea.style.height = `${availableHeight}px`;
}

window.addEventListener('resize', adjustHeight);
window.addEventListener('load', adjustHeight);
</script>

</body></html>
